// This file is safe to edit. Once it exists it will not be overwritten

package api

{{ $name := .Name }}
{{ $operations := .Operations }}
import(
	"net/http"

	"github.com/go-openapi/loads"

	"{{ .GenCommon.TargetImportPath }}/restapi"
	"{{ .GenCommon.TargetImportPath }}/restapi/operations"

	{{range $index, $op := .Operations}}
        {{ $found := false }}
        {{ range $i, $sop := $operations }}
            {{ if and (gt $i $index ) (eq $op.Package $sop.Package)}}
                {{ $found = true }}
            {{end}}
        {{end}}
        {{ if not $found }}
        api{{ pascalize $op.Package }} "{{$op.GenCommon.TargetImportPath}}/{{ $op.RootPackage }}/operations/{{ $op.Package }}"
        {{end}}
    {{end}}
)

type Handler struct {
    ops *operations.{{ pascalize .Name }}API
}

func NewHandler() (*Handler, error) {
	swaggerSpec, err := loads.Analyzed({{ .APIPackage }}.SwaggerJSON, "")
	if err != nil {
		return nil, err
	}
	r := &Handler{
	    ops: operations.New{{ pascalize .Name }}API(swaggerSpec),
	}
	r.setUpHandlers()

	return r, nil
}

func (h *Handler) handlerFor(method, path string) http.Handler {
	r, _ := h.ops.HandlerFor(method, path)

	return r
}

func (h *Handler) setUpHandlers() {
	{{range .Operations}}
    h.ops.{{ pascalize .Package }}{{ pascalize .Name }}Handler = api{{ pascalize .Package }}.{{ pascalize .Name }}HandlerFunc(h.{{ pascalize .Name }}Handler)
    {{- end}}

    // You can add your middleware to concrete route
    // h.ops.AddMiddlewareFor("%method%", "%route%", %middlewareBuilder%)

    // You can add your global middleware
    // h.ops.AddGlobalMiddleware(%middlewareBuilder%)

    configureAPI(h.ops)
}

