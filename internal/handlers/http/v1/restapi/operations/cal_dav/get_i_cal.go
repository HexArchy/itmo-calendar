// Code generated by go-swagger; DO NOT EDIT.

package cal_dav

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetICalHandlerFunc turns a function with the right signature into a get i cal handler
type GetICalHandlerFunc func(GetICalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetICalHandlerFunc) Handle(params GetICalParams) middleware.Responder {
	return fn(params)
}

// GetICalHandler interface for that can handle valid get i cal params
type GetICalHandler interface {
	Handle(GetICalParams) middleware.Responder
}

// NewGetICal creates a new http.Handler for the get i cal operation
func NewGetICal(ctx *middleware.Context, handler GetICalHandler) *GetICal {
	return &GetICal{Context: ctx, Handler: handler}
}

/*
	GetICal swagger:route GET /{isu}/ical CalDav getICal

Get user's iCal file by ISU.

Returns the iCalendar (.ics) file for the user with the given ISU.
*/
type GetICal struct {
	Context *middleware.Context
	Handler GetICalHandler
}

func (o *GetICal) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetICalParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
