// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleItem schedule item
//
// swagger:model ScheduleItem
type ScheduleItem struct {

	// date
	// Example: 2024-06-01
	// Required: true
	// Format: date
	Date *strfmt.Date `json:"date"`

	// lessons
	// Required: true
	Lessons []*ScheduleItemLessonsItems0 `json:"lessons"`
}

// Validate validates this schedule item
func (m *ScheduleItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLessons(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleItem) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItem) validateLessons(formats strfmt.Registry) error {

	if err := validate.Required("lessons", "body", m.Lessons); err != nil {
		return err
	}

	for i := 0; i < len(m.Lessons); i++ {
		if swag.IsZero(m.Lessons[i]) { // not required
			continue
		}

		if m.Lessons[i] != nil {
			if err := m.Lessons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lessons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lessons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this schedule item based on the context it is used
func (m *ScheduleItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLessons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleItem) contextValidateLessons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Lessons); i++ {

		if m.Lessons[i] != nil {

			if swag.IsZero(m.Lessons[i]) { // not required
				return nil
			}

			if err := m.Lessons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lessons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lessons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleItem) UnmarshalBinary(b []byte) error {
	var res ScheduleItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScheduleItemLessonsItems0 schedule item lessons items0
//
// swagger:model ScheduleItemLessonsItems0
type ScheduleItemLessonsItems0 struct {

	// building
	// Example: Main
	// Required: true
	Building *string `json:"building"`

	// format
	// Example: Offline
	// Required: true
	Format *string `json:"format"`

	// group
	// Example: A1
	// Required: true
	Group *string `json:"group"`

	// note
	// Example: Bring calculator
	Note string `json:"note,omitempty"`

	// room
	// Example: 101
	// Required: true
	Room *string `json:"room"`

	// subject
	// Example: Mathematics
	// Required: true
	Subject *string `json:"subject"`

	// teacher name
	// Example: Dr. Ivanov
	// Required: true
	TeacherName *string `json:"teacher_name"`

	// time end
	// Example: 2024-06-01T10:30:00Z
	// Required: true
	// Format: date-time
	TimeEnd *strfmt.DateTime `json:"time_end"`

	// time start
	// Example: 2024-06-01T09:00:00Z
	// Required: true
	// Format: date-time
	TimeStart *strfmt.DateTime `json:"time_start"`

	// type
	// Example: Lecture
	// Required: true
	Type *string `json:"type"`

	// zoom url
	// Example: https://zoom.us/j/123456789
	ZoomURL string `json:"zoom_url,omitempty"`
}

// Validate validates this schedule item lessons items0
func (m *ScheduleItemLessonsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuilding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeacherName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleItemLessonsItems0) validateBuilding(formats strfmt.Registry) error {

	if err := validate.Required("building", "body", m.Building); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItemLessonsItems0) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItemLessonsItems0) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItemLessonsItems0) validateRoom(formats strfmt.Registry) error {

	if err := validate.Required("room", "body", m.Room); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItemLessonsItems0) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItemLessonsItems0) validateTeacherName(formats strfmt.Registry) error {

	if err := validate.Required("teacher_name", "body", m.TeacherName); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItemLessonsItems0) validateTimeEnd(formats strfmt.Registry) error {

	if err := validate.Required("time_end", "body", m.TimeEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("time_end", "body", "date-time", m.TimeEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItemLessonsItems0) validateTimeStart(formats strfmt.Registry) error {

	if err := validate.Required("time_start", "body", m.TimeStart); err != nil {
		return err
	}

	if err := validate.FormatOf("time_start", "body", "date-time", m.TimeStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleItemLessonsItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this schedule item lessons items0 based on context it is used
func (m *ScheduleItemLessonsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleItemLessonsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleItemLessonsItems0) UnmarshalBinary(b []byte) error {
	var res ScheduleItemLessonsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
